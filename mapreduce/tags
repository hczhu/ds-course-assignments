!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CleanupFiles	master_splitmerge.go	/^func (mr *Master) CleanupFiles() {$/;"	f
Distributed	master.go	/^func Distributed(jobName string, files []string, nreduce int, master string) (mr *Master) {$/;"	f
DoTask	worker.go	/^func (wk *Worker) DoTask(arg *DoTaskArgs, _ *struct{}) error {$/;"	f
DoTaskArgs	common_rpc.go	/^type DoTaskArgs struct {$/;"	t
KeyValue	common.go	/^type KeyValue struct {$/;"	t
MapFunc	test_test.go	/^func MapFunc(file string, value string) (res []KeyValue) {$/;"	f
Master	master.go	/^type Master struct {$/;"	t
Parallelism	worker.go	/^type Parallelism struct {$/;"	t
ReduceFunc	test_test.go	/^func ReduceFunc(key string, values []string) string {$/;"	f
Register	master.go	/^func (mr *Master) Register(args *RegisterArgs, _ *struct{}) error {$/;"	f
RegisterArgs	common_rpc.go	/^type RegisterArgs struct {$/;"	t
RunWorker	worker.go	/^func RunWorker(MasterAddress string, me string,$/;"	f
Sequential	master.go	/^func Sequential(jobName string, files []string, nreduce int,$/;"	f
Shutdown	master_rpc.go	/^func (mr *Master) Shutdown(_, _ *struct{}) error {$/;"	f
Shutdown	worker.go	/^func (wk *Worker) Shutdown(_ *struct{}, res *ShutdownReply) error {$/;"	f
ShutdownReply	common_rpc.go	/^type ShutdownReply struct {$/;"	t
TestManyFailures	test_test.go	/^func TestManyFailures(t *testing.T) {$/;"	f
TestOneFailure	test_test.go	/^func TestOneFailure(t *testing.T) {$/;"	f
TestParallelBasic	test_test.go	/^func TestParallelBasic(t *testing.T) {$/;"	f
TestParallelCheck	test_test.go	/^func TestParallelCheck(t *testing.T) {$/;"	f
TestSequentialMany	test_test.go	/^func TestSequentialMany(t *testing.T) {$/;"	f
TestSequentialSingle	test_test.go	/^func TestSequentialSingle(t *testing.T) {$/;"	f
Wait	master.go	/^func (mr *Master) Wait() {$/;"	f
Worker	worker.go	/^type Worker struct {$/;"	t
call	common_rpc.go	/^func call(srv string, rpcname string,$/;"	f
check	test_test.go	/^func check(t *testing.T, files []string) {$/;"	f
checkWorker	test_test.go	/^func checkWorker(t *testing.T, l []int) {$/;"	f
cleanup	test_test.go	/^func cleanup(mr *Master) {$/;"	f
debug	common.go	/^func debug(format string, a ...interface{}) (n int, err error) {$/;"	f
debugEnabled	common.go	/^const debugEnabled = false$/;"	c
doMap	common_map.go	/^func doMap($/;"	f
doReduce	common_reduce.go	/^func doReduce($/;"	f
forwardRegistrations	master.go	/^func (mr *Master) forwardRegistrations(ch chan string) {$/;"	f
ihash	common_map.go	/^func ihash(s string) int {$/;"	f
jobPhase	common.go	/^type jobPhase string$/;"	t
killWorkers	master.go	/^func (mr *Master) killWorkers() []int {$/;"	f
makeInputs	test_test.go	/^func makeInputs(num int) []string {$/;"	f
mapPhase	common.go	/^	mapPhase    jobPhase = "mapPhase"$/;"	c
mapreduce	common.go	/^package mapreduce$/;"	p
mapreduce	common_map.go	/^package mapreduce$/;"	p
mapreduce	common_reduce.go	/^package mapreduce$/;"	p
mapreduce	common_rpc.go	/^package mapreduce$/;"	p
mapreduce	master.go	/^package mapreduce$/;"	p
mapreduce	master_rpc.go	/^package mapreduce$/;"	p
mapreduce	master_splitmerge.go	/^package mapreduce$/;"	p
mapreduce	schedule.go	/^package mapreduce$/;"	p
mapreduce	test_test.go	/^package mapreduce$/;"	p
mapreduce	worker.go	/^package mapreduce$/;"	p
merge	master_splitmerge.go	/^func (mr *Master) merge() {$/;"	f
mergeName	common.go	/^func mergeName(jobName string, reduceTask int) string {$/;"	f
nMap	test_test.go	/^	nMap    = 20$/;"	c
nNumber	test_test.go	/^	nNumber = 100000$/;"	c
nReduce	test_test.go	/^	nReduce = 10$/;"	c
newMaster	master.go	/^func newMaster(master string) (mr *Master) {$/;"	f
port	test_test.go	/^func port(suffix string) string {$/;"	f
reduceName	common.go	/^func reduceName(jobName string, mapTask int, reduceTask int) string {$/;"	f
reducePhase	common.go	/^	reducePhase          = "reducePhase"$/;"	c
register	worker.go	/^func (wk *Worker) register(master string) {$/;"	f
removeFile	master_splitmerge.go	/^func removeFile(n string) {$/;"	f
run	master.go	/^func (mr *Master) run(jobName string, files []string, nreduce int,$/;"	f
schedule	schedule.go	/^func schedule(jobName string, mapFiles []string, nReduce int, phase jobPhase, registerChan chan string) {$/;"	f
setup	test_test.go	/^func setup() *Master {$/;"	f
startRPCServer	master_rpc.go	/^func (mr *Master) startRPCServer() {$/;"	f
stopRPCServer	master_rpc.go	/^func (mr *Master) stopRPCServer() {$/;"	f
